// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using PredictTaxiFareML.Model;
using static System.Environment;

namespace PredictTaxiFareML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"C:\My Stuff\Practise Projects\Machine Learning for dot net developers\C# Machine Learning Projects\PredictTaxiFare\Consolidated.csv";


        private const string Quit = "quit";
        private const string ModelPath = @"MLModel.zip";

        static void Main(string[] args)
        {
            //// Create single instance of sample data from first line of dataset for model input
            //ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);

            //// Make a single prediction on the sample data and print results
            //ModelOutput predictionResult = ConsumeModel.Predict(sampleData);

            //Console.WriteLine("Using model to make single prediction -- Comparing actual Fare_amount with predicted Fare_amount from sample data...\n\n");
            //Console.WriteLine($"vendor_id: {sampleData.Vendor_id}");
            //Console.WriteLine($"rate_code: {sampleData.Rate_code}");
            //Console.WriteLine($"passenger_count: {sampleData.Passenger_count}");
            //Console.WriteLine($"trip_time_in_secs: {sampleData.Trip_time_in_secs}");
            //Console.WriteLine($"trip_distance: {sampleData.Trip_distance}");
            //Console.WriteLine($"payment_type: {sampleData.Payment_type}");
            //Console.WriteLine($"\n\nActual Fare_amount: {sampleData.Fare_amount} \nPredicted Fare_amount: {predictionResult.Score}\n\n");
            //Console.WriteLine("=============== End of process, hit any key to finish ===============");
            //Console.ReadKey();


            var context = new MLContext().Model;
            var model = context.Load(GetPath(ModelPath), out _);
            var engine = context.CreatePredictionEngine<ModelInput, ModelOutput>(model);

            Console.WriteLine("== AutoML Interactive Taxi Fare Predictor ==");
            while(GetInput(out var input))
                Console.WriteLine($"{NewLine}Predicted fare: "+ $"{engine.Predict(input).Score:C}{NewLine}");


        }

        private static bool GetInput(out ModelInput input)
        {
            Console.WriteLine($"{NewLine}Enter trip details:{NewLine}");

            input = new ModelInput
            {
                Passenger_count = ReadF("Passenger count", 1),
                Trip_time_in_secs = ReadF("Trip time (mins)", 1) * 60,
                Trip_distance = ReadF("Distance (mi)", 0),
                Vendor_id = ReadCat("Vendor", "VTS", "CMD"),
                Rate_code = ReadF("Rate code (0 - 6)", 0, 6),
                Payment_type = ReadCat("Payment type", "CRD", "CSH")
            };

            return true;
        }

        private static float ReadF(string title,float min=float.MinValue,float max = float.MaxValue)
        {
            while (true)
            {
                try
                {
                    return Clamp(float.Parse(Prompt(title)), min, max);
                }
                catch(Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }

        private static string ReadCat(string title, params string[] values)
        {
            title = $"{title} [{String.Join(", ", values)}]";
            var ret = "";
            while (!values.Contains(ret))
                ret = Prompt(title);

            return ret;
        }

        private static string Prompt(string title)
        {
            Console.Write($"  - {title}: ");
            return Console.ReadLine().Trim().ToUpper();
        }

        private static float Clamp(float input, float min, float max)
        {
            var ret = Math.Max(Math.Min(input, max), min);

            if (Math.Abs(ret - input) > 0.1)
                Console.WriteLine($"Clamping to {ret}");

            return ret;
        }

        private static string GetPath(string relativePath)
        {
            var root = new FileInfo(typeof(Program).Assembly.Location);
            var asmPath = root.Directory.FullName;

            return Path.Combine(asmPath, relativePath);
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: ',',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }
        #endregion
    }
}
